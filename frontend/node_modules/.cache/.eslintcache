[{"/home/joke/Videos/ecommerce/backend/frontend/src/index.js":"1","/home/joke/Videos/ecommerce/backend/frontend/src/store.js":"2","/home/joke/Videos/ecommerce/backend/frontend/src/App.js":"3","/home/joke/Videos/ecommerce/backend/frontend/src/reportWebVitals.js":"4","/home/joke/Videos/ecommerce/backend/frontend/src/reducer/productReducers.js":"5","/home/joke/Videos/ecommerce/backend/frontend/src/reducer/userReducers.js":"6","/home/joke/Videos/ecommerce/backend/frontend/src/reducer/cartReducers.js":"7","/home/joke/Videos/ecommerce/backend/frontend/src/reducer/orderReducers.js":"8","/home/joke/Videos/ecommerce/backend/frontend/src/components/Header.js":"9","/home/joke/Videos/ecommerce/backend/frontend/src/components/Footer.js":"10","/home/joke/Videos/ecommerce/backend/frontend/src/screens/HomeScreen.js":"11","/home/joke/Videos/ecommerce/backend/frontend/src/screens/ProductScreen.js":"12","/home/joke/Videos/ecommerce/backend/frontend/src/screens/CartScreen.js":"13","/home/joke/Videos/ecommerce/backend/frontend/src/screens/LoginScreen.js":"14","/home/joke/Videos/ecommerce/backend/frontend/src/screens/RegisterScreen.js":"15","/home/joke/Videos/ecommerce/backend/frontend/src/screens/ProfileScreen.js":"16","/home/joke/Videos/ecommerce/backend/frontend/src/screens/ShippingScreen.js":"17","/home/joke/Videos/ecommerce/backend/frontend/src/screens/PaymentScreen.js":"18","/home/joke/Videos/ecommerce/backend/frontend/src/screens/PlaceOrderScreen.js":"19","/home/joke/Videos/ecommerce/backend/frontend/src/screens/UserListScreen.js":"20","/home/joke/Videos/ecommerce/backend/frontend/src/screens/OrderScreen.js":"21","/home/joke/Videos/ecommerce/backend/frontend/src/screens/ProductListScreen.js":"22","/home/joke/Videos/ecommerce/backend/frontend/src/screens/OrderListScreen.js":"23","/home/joke/Videos/ecommerce/backend/frontend/src/screens/UserEditScreen.js":"24","/home/joke/Videos/ecommerce/backend/frontend/src/screens/ProductEditScreen.js":"25","/home/joke/Videos/ecommerce/backend/frontend/src/components/SearchBox.js":"26","/home/joke/Videos/ecommerce/backend/frontend/src/components/Product.js":"27","/home/joke/Videos/ecommerce/backend/frontend/src/components/Loader.js":"28","/home/joke/Videos/ecommerce/backend/frontend/src/components/Message.js":"29","/home/joke/Videos/ecommerce/backend/frontend/src/components/Paginate.js":"30","/home/joke/Videos/ecommerce/backend/frontend/src/components/ProductCarousel.js":"31","/home/joke/Videos/ecommerce/backend/frontend/src/constants/productConstants.js":"32","/home/joke/Videos/ecommerce/backend/frontend/src/constants/cartConstants.js":"33","/home/joke/Videos/ecommerce/backend/frontend/src/constants/orderConstants.js":"34","/home/joke/Videos/ecommerce/backend/frontend/src/constants/userConstants.js":"35","/home/joke/Videos/ecommerce/backend/frontend/src/components/Rating.js":"36","/home/joke/Videos/ecommerce/backend/frontend/src/actions/userActions.js":"37","/home/joke/Videos/ecommerce/backend/frontend/src/actions/productActions.js":"38","/home/joke/Videos/ecommerce/backend/frontend/src/actions/cartAction.js":"39","/home/joke/Videos/ecommerce/backend/frontend/src/components/FormContainer.js":"40","/home/joke/Videos/ecommerce/backend/frontend/src/actions/orderAction.js":"41","/home/joke/Videos/ecommerce/backend/frontend/src/components/CheckoutSteps.js":"42"},{"size":632,"mtime":1690365222417,"results":"43","hashOfConfig":"44"},{"size":2240,"mtime":1694161669301,"results":"45","hashOfConfig":"44"},{"size":2318,"mtime":1694164941983,"results":"46","hashOfConfig":"44"},{"size":362,"mtime":1689860818524,"results":"47","hashOfConfig":"44"},{"size":4122,"mtime":1694161601948,"results":"48","hashOfConfig":"44"},{"size":4110,"mtime":1693130069218,"results":"49","hashOfConfig":"44"},{"size":1398,"mtime":1692008188183,"results":"50","hashOfConfig":"44"},{"size":3882,"mtime":1693559595167,"results":"51","hashOfConfig":"44"},{"size":2776,"mtime":1694165462469,"results":"52","hashOfConfig":"44"},{"size":377,"mtime":1690126090212,"results":"53","hashOfConfig":"44"},{"size":1757,"mtime":1694162832756,"results":"54","hashOfConfig":"44"},{"size":10994,"mtime":1693917927351,"results":"55","hashOfConfig":"44"},{"size":3393,"mtime":1691568839492,"results":"56","hashOfConfig":"44"},{"size":2216,"mtime":1691569253066,"results":"57","hashOfConfig":"44"},{"size":3182,"mtime":1691569351514,"results":"58","hashOfConfig":"44"},{"size":5533,"mtime":1693128329485,"results":"59","hashOfConfig":"44"},{"size":2474,"mtime":1691573125372,"results":"60","hashOfConfig":"44"},{"size":1529,"mtime":1691657867429,"results":"61","hashOfConfig":"44"},{"size":6091,"mtime":1692007749464,"results":"62","hashOfConfig":"44"},{"size":3575,"mtime":1693212911800,"results":"63","hashOfConfig":"44"},{"size":8679,"mtime":1693560642232,"results":"64","hashOfConfig":"44"},{"size":5096,"mtime":1694077322218,"results":"65","hashOfConfig":"44"},{"size":3540,"mtime":1693477267612,"results":"66","hashOfConfig":"44"},{"size":3006,"mtime":1693131056898,"results":"67","hashOfConfig":"44"},{"size":5735,"mtime":1693474887485,"results":"68","hashOfConfig":"44"},{"size":1051,"mtime":1694073771092,"results":"69","hashOfConfig":"44"},{"size":933,"mtime":1690136415096,"results":"70","hashOfConfig":"44"},{"size":360,"mtime":1691151684233,"results":"71","hashOfConfig":"44"},{"size":210,"mtime":1690375144295,"results":"72","hashOfConfig":"44"},{"size":863,"mtime":1694078575967,"results":"73","hashOfConfig":"44"},{"size":1199,"mtime":1694162682602,"results":"74","hashOfConfig":"44"},{"size":1500,"mtime":1694161433680,"results":"75","hashOfConfig":"44"},{"size":287,"mtime":1692007864777,"results":"76","hashOfConfig":"44"},{"size":1247,"mtime":1693558933697,"results":"77","hashOfConfig":"44"},{"size":1453,"mtime":1693129893577,"results":"78","hashOfConfig":"44"},{"size":1627,"mtime":1690130061764,"results":"79","hashOfConfig":"44"},{"size":7318,"mtime":1693130860018,"results":"80","hashOfConfig":"44"},{"size":5912,"mtime":1694161901353,"results":"81","hashOfConfig":"44"},{"size":1292,"mtime":1691657655764,"results":"82","hashOfConfig":"44"},{"size":362,"mtime":1691146548650,"results":"83","hashOfConfig":"44"},{"size":5877,"mtime":1693559735863,"results":"84","hashOfConfig":"44"},{"size":1320,"mtime":1691572976220,"results":"85","hashOfConfig":"44"},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},"1h5ut6p",{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"89"},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"103","messages":"104","suppressedMessages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"106","messages":"107","suppressedMessages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"109","messages":"110","suppressedMessages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"112","messages":"113","suppressedMessages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","suppressedMessages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"118","messages":"119","suppressedMessages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"89"},{"filePath":"122","messages":"123","suppressedMessages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"89"},{"filePath":"126","messages":"127","suppressedMessages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"129","messages":"130","suppressedMessages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"132","messages":"133","suppressedMessages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"89"},{"filePath":"136","messages":"137","suppressedMessages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"89"},{"filePath":"140","messages":"141","suppressedMessages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"89"},{"filePath":"144","messages":"145","suppressedMessages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"89"},{"filePath":"148","messages":"149","suppressedMessages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"89"},{"filePath":"152","messages":"153","suppressedMessages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"89"},{"filePath":"156","messages":"157","suppressedMessages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"89"},{"filePath":"160","messages":"161","suppressedMessages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"89"},{"filePath":"164","messages":"165","suppressedMessages":"166","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"89"},{"filePath":"168","messages":"169","suppressedMessages":"170","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"89"},{"filePath":"172","messages":"173","suppressedMessages":"174","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"175","messages":"176","suppressedMessages":"177","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"178","messages":"179","suppressedMessages":"180","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"181","messages":"182","suppressedMessages":"183","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"184","messages":"185","suppressedMessages":"186","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"187","messages":"188","suppressedMessages":"189","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"190","messages":"191","suppressedMessages":"192","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193","usedDeprecatedRules":"89"},{"filePath":"194","messages":"195","suppressedMessages":"196","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"197","messages":"198","suppressedMessages":"199","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"200","messages":"201","suppressedMessages":"202","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"203","messages":"204","suppressedMessages":"205","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"206","messages":"207","suppressedMessages":"208","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"209","messages":"210","suppressedMessages":"211","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"212","usedDeprecatedRules":"89"},{"filePath":"213","messages":"214","suppressedMessages":"215","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"216","usedDeprecatedRules":"89"},{"filePath":"217","messages":"218","suppressedMessages":"219","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"220","messages":"221","suppressedMessages":"222","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"223","usedDeprecatedRules":"89"},{"filePath":"224","messages":"225","suppressedMessages":"226","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"227","usedDeprecatedRules":"89"},{"filePath":"228","messages":"229","suppressedMessages":"230","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},"/home/joke/Videos/ecommerce/backend/frontend/src/index.js",[],[],[],"/home/joke/Videos/ecommerce/backend/frontend/src/store.js",["231"],[],"import { configureStore } from '@reduxjs/toolkit';\nimport thunk from 'redux-thunk';\nimport { \n  productListReducer, \n  productDetailsReducer, \n  productDeleteReducer, \n  productCreateReducer,\n  productUpdateReducer,\n  productReviewCreateReducer, \n  productTopRatedReducer} from './reducer/productReducers';\nimport { cartReducer } from './reducer/cartReducers';\nimport { \n  userLoginReducer, \n  userRegisterReducer, \n  userDetailsReducer, \n  userUpdateProfileReducer, \n  userListReducer, \n  userDeleteReducer, \n  userUpdateReducer } from './reducer/userReducers';\nimport { orderCreateReducer, \n  orderDetailsReducer, \n  orderPayReducer, \n  orderListMyReducer, \n  orderListReducer,\n  orderDeliverReducer } from './reducer/orderReducers';\n\n\nconst reducer = {\n  productList: productListReducer,\n  productDetails: productDetailsReducer,\n  productDelete: productDeleteReducer,\n  productCreate: productCreateReducer,\n  productUpdate: productUpdateReducer,\n  productReviewCreate: productCreateReducer,\n  productTopRated: productTopRatedReducer,\n\n  cart: cartReducer,\n  userLogin: userLoginReducer,\n  userRegister: userRegisterReducer,\n  userDetails: userDetailsReducer,\n  userUpdateProfile: userUpdateProfileReducer,\n  userList: userListReducer,\n  userDelete: userDeleteReducer,\n  userUpdate: userUpdateReducer,\n\n  orderCreate: orderCreateReducer,\n  orderDetails: orderDetailsReducer,\n  orderPay: orderPayReducer,\n  orderListMy: orderListMyReducer,\n  orderList: orderListReducer,\n  orderDeliver: orderDeliverReducer,\n};\n\nconst cartItemsFromStorage = localStorage.getItem('cartItems') ?\n    JSON.parse(localStorage.getItem('cartItems')) : []\n\nconst userInfoFromStorage = localStorage.getItem('userInfo') ?\nJSON.parse(localStorage.getItem('userInfo')) : null\n\n\nconst shippingAddressFromStorage = localStorage.getItem('shippingAddress') ?\nJSON.parse(localStorage.getItem('shippingAddress')) : {}\n\n\n\nconst initialState = {\n  cart: { cartItems: cartItemsFromStorage, shippingAddress: shippingAddressFromStorage },\n  userLogin: {userInfo: userInfoFromStorage}\n}\n\nconst middleware = [thunk];\n\n\nconst store = configureStore({\n  reducer,\n  initialState,\n  middleware,\n  devTools: true, // This enables the Redux DevTools Extension\n});\n\nexport default store;","/home/joke/Videos/ecommerce/backend/frontend/src/App.js",[],[],"/home/joke/Videos/ecommerce/backend/frontend/src/reportWebVitals.js",[],[],"/home/joke/Videos/ecommerce/backend/frontend/src/reducer/productReducers.js",[],[],"/home/joke/Videos/ecommerce/backend/frontend/src/reducer/userReducers.js",[],[],"/home/joke/Videos/ecommerce/backend/frontend/src/reducer/cartReducers.js",[],[],"/home/joke/Videos/ecommerce/backend/frontend/src/reducer/orderReducers.js",[],[],"/home/joke/Videos/ecommerce/backend/frontend/src/components/Header.js",[],[],"/home/joke/Videos/ecommerce/backend/frontend/src/components/Footer.js",[],[],"/home/joke/Videos/ecommerce/backend/frontend/src/screens/HomeScreen.js",["232"],[],"import React, { useState, useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useLocation } from 'react-router-dom'\nimport { Row, Col } from 'react-bootstrap'\nimport Product from '../components/Product'\nimport { listProducts } from '../actions/productActions'\nimport Loader from '../components/Loader'\nimport Message from '../components/Message'\nimport Paginate from '../components/Paginate'\nimport ProductCarousel from '../components/ProductCarousel'\n\n\n\nfunction HomeScreen() {\n    const dispatch = useDispatch()\n    const location = useLocation();\n\n    const productList = useSelector(state => state.productList)\n    const { error, loading, products, page, pages } = productList\n\n    let keyword = location.search;\n\n\n    useEffect(() => {\n        dispatch(listProducts(keyword))       \n        \n    }, [dispatch, keyword])\n\n    console.log(\"Loading:\", loading); // Check the value of loading here\n    console.log(\"Error:\", error); // Check the value of error here\n\n\nreturn (\n    <div> \n        {!keyword && <ProductCarousel />}\n        \n    <h1>Latest Products</h1>\n    {loading ? <Loader />\n                : error ? <Message variant='danger'>{error}</Message>\n                    :\n                    <div>\n                        <Row>\n                            {products.map(product => (\n                                <Col key={product._id} sm={12} md={6} lg={4} xl={3}>\n                                    <Product product={product} />\n                                </Col>\n                            ))}\n                        </Row>\n                        <Paginate page={page} pages={pages} keyword={keyword} />\n                    </div>\n            }\n    \n    </div> \n)\n}\n\nexport default HomeScreen\n","/home/joke/Videos/ecommerce/backend/frontend/src/screens/ProductScreen.js",["233"],[],"import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link, useParams, useNavigate } from 'react-router-dom';\nimport { Row, Col, Image, ListGroup, Button, Card, Form } from 'react-bootstrap';\nimport Rating from '../components/Rating';\nimport Loader from '../components/Loader';\nimport Message from '../components/Message';\nimport { listProductDetails, createProductReview } from '../actions/productActions';\nimport { PRODUCT_CREATE_REVIEW_RESET } from '../constants/productConstants';\n\nfunction ProductScreen() {\n    const navigate = useNavigate();\n    const { id } = useParams();\n\n    const [qty, setQty] = useState(1)\n    const [rating, setRating] = useState(0)\n    const [comment, setComment] = useState('')\n\n    const dispatch = useDispatch()\n\n    const productDetails = useSelector(state => state.productDetails)\n    const { loading, error, product } = productDetails\n\n    const userLogin = useSelector(state => state.userLogin)\n    const { userInfo } = userLogin\n\n    const productReviewCreate = useSelector(state => state.productReviewCreate)\n    const {\n        loading: loadingProductReview,\n        error: errorProductReview,\n        success: successProductReview,\n    } = productReviewCreate\n\n    useEffect(() => {\n        if (successProductReview) {\n            setRating(0)\n            setComment('')\n            dispatch({ type: PRODUCT_CREATE_REVIEW_RESET })\n        }\n\n        dispatch(listProductDetails(id));\n    }, [dispatch, id, successProductReview]);\n\n    const addToCartHandler = () => {\n        navigate(`/cart/${id}?qty=${qty}`);\n    };\n\n    const submitHandler = (e) => {\n        e.preventDefault();\n        dispatch(\n            createProductReview(\n                id, {\n                rating,\n                comment,\n            })\n        );\n    };\n\n    return (\n        <div>\n        <Link to='/' className='btn btn-light my-3'>Go Back</Link>\n        {loading ?\n            <Loader />\n            : error\n                ? <Message variant='danger'>{error}</Message>\n                : (\n                    <div>\n                        <Row>\n                            <Col md={6}>\n                                <Image src={product.image} alt={product.name} fluid />\n                            </Col>\n\n\n                            <Col md={3}>\n                                <ListGroup variant=\"flush\">\n                                    <ListGroup.Item>\n                                        <h3>{product.name}</h3>\n                                    </ListGroup.Item>\n\n                                    <ListGroup.Item>\n                                        <Rating value={product.rating} text={`${product.numReviews} reviews`} color={'#f8e825'} />\n                                    </ListGroup.Item>\n\n                                    <ListGroup.Item>\n                                        Price: ${product.price}\n                                    </ListGroup.Item>\n\n                                    <ListGroup.Item>\n                                        Description: {product.description}\n                                    </ListGroup.Item>\n                                </ListGroup>\n                            </Col>\n\n\n                            <Col md={3}>\n                                <Card>\n                                    <ListGroup variant='flush'>\n                                        <ListGroup.Item>\n                                            <Row>\n                                                <Col>Price:</Col>\n                                                <Col>\n                                                    <strong>${product.price}</strong>\n                                                </Col>\n                                            </Row>\n                                        </ListGroup.Item>\n                                        <ListGroup.Item>\n                                            <Row>\n                                                <Col>Status:</Col>\n                                                <Col>\n                                                    {product.countInStock > 0 ? 'In Stock' : 'Out of Stock'}\n                                                </Col>\n                                            </Row>\n                                        </ListGroup.Item>\n\n                                        {product.countInStock > 0 && (\n                                            <ListGroup.Item>\n                                                <Row>\n                                                    <Col>Qty</Col>\n                                                    <Col xs='auto' className='my-1'>\n                                                        <Form.Control\n                                                            as=\"select\"\n                                                            value={qty}\n                                                            onChange={(e) => setQty(e.target.value)}\n                                                        >\n                                                            {\n\n                                                                [...Array(product.countInStock).keys()].map((x) => (\n                                                                    <option key={x + 1} value={x + 1}>\n                                                                        {x + 1}\n                                                                    </option>\n                                                                ))\n                                                            }\n\n                                                        </Form.Control>\n                                                    </Col>\n                                                </Row>\n                                            </ListGroup.Item>\n                                        )}\n\n\n                                        <ListGroup.Item>\n                                            <Button\n                                                onClick={addToCartHandler}\n                                                className='btn-block'\n                                                disabled={product.countInStock == 0}\n                                                type='button'>\n                                                Add to Cart\n                                            </Button>\n                                        </ListGroup.Item>\n                                    </ListGroup>\n                                </Card>\n                            </Col>\n                        </Row>\n\n                        <Row>\n                            <Col md={6}>\n                                <h4>Reviews</h4>\n                                {product.reviews.length === 0 && <Message variant='info'>No Reviews</Message>}\n\n                                <ListGroup variant='flush'>\n                                    {product.reviews.map((review) => (\n                                        <ListGroup.Item key={review._id}>\n                                            <strong>{review.name}</strong>\n                                            <Rating value={review.rating} color='#f8e825' />\n                                            <p>{review.createdAt.substring(0, 10)}</p>\n                                            <p>{review.comment}</p>\n                                        </ListGroup.Item>\n                                    ))}\n\n                                    <ListGroup.Item>\n                                        <h4>Write a review</h4>\n\n                                        {loadingProductReview && <Loader />}\n                                        {successProductReview && <Message variant='success'>Review Submitted</Message>}\n                                        {errorProductReview && <Message variant='danger'>{errorProductReview}</Message>}\n\n                                        {userInfo ? (\n                                            <Form onSubmit={submitHandler}>\n                                                <Form.Group controlId='rating'>\n                                                    <Form.Label>Rating</Form.Label>\n                                                    <Form.Control\n                                                        as='select'\n                                                        value={rating}\n                                                        onChange={(e) => setRating(e.target.value)}\n                                                    >\n                                                        <option value=''>Select...</option>\n                                                        <option value='1'>1 - Poor</option>\n                                                        <option value='2'>2 - Fair</option>\n                                                        <option value='3'>3 - Good</option>\n                                                        <option value='4'>4 - Very Good</option>\n                                                        <option value='5'>5 - Excellent</option>\n                                                    </Form.Control>\n                                                </Form.Group>\n\n                                                <Form.Group controlId='comment'>\n                                                    <Form.Label>Review</Form.Label>\n                                                    <Form.Control\n                                                        as='textarea'\n                                                        row='5'\n                                                        value={comment}\n                                                        onChange={(e) => setComment(e.target.value)}\n                                                    ></Form.Control>\n                                                </Form.Group>\n\n                                                <Button\n                                                    disabled={loadingProductReview}\n                                                    type='submit'\n                                                    variant='primary'\n                                                >\n                                                    Submit\n                                                </Button>\n\n                                            </Form>\n                                        ) : (\n                                                <Message variant='info'>Please <Link to='/login'>login</Link> to write a review</Message>\n                                            )}\n                                    </ListGroup.Item>\n                                </ListGroup>\n                            </Col>\n                        </Row>\n                    </div>\n                )\n\n        }\n\n\n    </div >\n    );\n}\n\nexport default ProductScreen;\n","/home/joke/Videos/ecommerce/backend/frontend/src/screens/CartScreen.js",[],[],"/home/joke/Videos/ecommerce/backend/frontend/src/screens/LoginScreen.js",[],[],"/home/joke/Videos/ecommerce/backend/frontend/src/screens/RegisterScreen.js",["234"],[],"import React, { useState, useEffect } from 'react'\nimport { Link, useLocation, useNavigate } from 'react-router-dom'\nimport { Form, Button, Row, Col } from 'react-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport Loader from '../components/Loader'\nimport Message from '../components/Message'\nimport FormContainer from '../components/FormContainer'\nimport { register } from '../actions/userActions'\n\n\nfunction RegisterScreen() {\n    const [name, setName] = useState('')\n    const [email, setEmail] = useState('')\n    const [password, setPassword] = useState('')\n    const [confirmPassword, setConfirmPassword] = useState('')\n    const [message, setMessage] = useState('')\n\n    \n    const dispatch = useDispatch()\n    const history = useNavigate()\n\n    const location = useLocation()\n    const redirect = location.search ? location.search.split('=')[1] : '/'\n\n    const userRegister = useSelector(state => state.userRegister)\n    const { error, loading, userInfo } = userRegister\n \n    useEffect(() => {\n        if(userInfo){\n            history(redirect)\n        }\n    }, [history, userInfo, redirect])\n\n    const submitHandler = (e) => {\n        e.preventDefault()\n        if(password != confirmPassword){\n            setMessage('Passwords do not match')\n        }else{\n        dispatch(register(name, email, password))\n        }\n    }\n  return (\n    <FormContainer>\n        <h1>Sign Up</h1>\n        {message && <Message variant='danger'>{message}</Message>}\n        {error && <Message variant='danger'>{error}</Message>}\n        {loading && <Loader />}\n\n        <Form onSubmit={submitHandler}>\n            <Form.Group controlId='name'>\n                <Form.Label>Email Name</Form.Label>\n                <Form.Control type='name' required placeholder='Enter Name' value={name} onChange={(e) => setName(e.target.value)}>\n                </Form.Control>\n            </Form.Group>\n\n\n            <Form.Group controlId='email'>\n                <Form.Label>Email Address</Form.Label>\n                <Form.Control type='email' required placeholder='Enter Email' value={email} onChange={(e) => setEmail(e.target.value)}>\n                </Form.Control>\n            </Form.Group>\n\n            <Form.Group controlId='password'>\n                <Form.Label>Password</Form.Label>\n                <Form.Control required type='password' placeholder='Enter Password' value={password} onChange={(e) => setPassword(e.target.value)}>\n                </Form.Control>\n            </Form.Group>\n\n            <Form.Group controlId='passwordConfirm'>\n                <Form.Label>Password Confirm</Form.Label>\n                <Form.Control required type='password' placeholder='Confirm Password' value={confirmPassword} onChange={(e) => setConfirmPassword(e.target.value)}>\n                </Form.Control>\n            </Form.Group>\n\n            <Button type='submit' variant='primary'> Register</Button>\n\n        </Form>\n\n        <Row className='py-3'>\n            <Col>\n                Have an Account? <Link to={redirect ? `/login?redirect=${redirect}` : '/login'}>Sign In</Link>\n            </Col>\n        </Row>\n      \n    </FormContainer>\n  )\n}\n\nexport default RegisterScreen\n","/home/joke/Videos/ecommerce/backend/frontend/src/screens/ProfileScreen.js",["235"],[],"import React, { useState, useEffect } from 'react'\nimport { useNavigate } from 'react-router-dom'\nimport { Form, Button, Row, Col, Table } from 'react-bootstrap'\nimport { LinkContainer } from 'react-router-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport Loader from '../components/Loader'\nimport Message from '../components/Message'\nimport { getUserDetails, updateUserProfile } from '../actions/userActions'\nimport { USER_UPDATE_PROFILE_RESET } from '../constants/userConstants'\nimport { listMyOrders } from '../actions/orderAction'\n \nfunction ProfileScreen() {\n    const [name, setName] = useState('')\n    const [email, setEmail] = useState('')\n    const [password, setPassword] = useState('')\n    const [confirmPassword, setConfirmPassword] = useState('')\n    const [message, setMessage] = useState('')\n\n    const history = useNavigate()\n    const dispatch = useDispatch()\n    \n\n\n    const userDetails = useSelector(state => state.userDetails)\n    const { error, loading, user } = userDetails\n\n    const userLogin = useSelector(state => state.userLogin)\n    const { userInfo } = userLogin\n\n    const userUpdateProfile = useSelector(state => state.userUpdateProfile)\n    const { success } = userUpdateProfile\n\n    const orderListMy = useSelector(state => state.orderListMy)\n    const { loading: loadingOrders, error: errorOrders, orders } = orderListMy\n\n \n    useEffect(() => {\n        if(!userInfo){\n            history('/login')\n        }else{\n            if(!user || !user.name || success || userInfo._id !== user._id){\n                dispatch({ type: USER_UPDATE_PROFILE_RESET })\n                dispatch(getUserDetails('profile')) \n                dispatch(listMyOrders()) \n            }else{\n                setName(user.name)\n                setEmail(user.email)\n            }\n        }\n    }, [dispatch, history, userInfo, user, success])\n\n\n    \n\n    const submitHandler = (e) => {\n        e.preventDefault()\n        if(password != confirmPassword){\n            setMessage('Passwords do not match')\n        }else{\n            dispatch(updateUserProfile({\n                'id': user._id,\n                'name': name,\n                'email': email,\n                'password': password\n            }))\n            setMessage('')\n        }\n    }\n\n  return (\n    <Row>\n      <Col md={3}>\n        <h2>User Profile</h2>\n\n        {message && <Message variant='danger'>{message}</Message>}\n        {error && <Message variant='danger'>{error}</Message>}\n        {loading && <Loader />}\n\n        <Form onSubmit={submitHandler}>\n            <Form.Group controlId='name'>\n                <Form.Label>Email Name</Form.Label>\n                <Form.Control type='name' required placeholder='Enter Name' value={name} onChange={(e) => setName(e.target.value)}>\n                </Form.Control>\n            </Form.Group>\n\n\n            <Form.Group controlId='email'>\n                <Form.Label>Email Address</Form.Label>\n                <Form.Control type='email' required placeholder='Enter Email' value={email} onChange={(e) => setEmail(e.target.value)}>\n                </Form.Control>\n            </Form.Group>\n\n            <Form.Group controlId='password'>\n                <Form.Label>Password</Form.Label>\n                <Form.Control type='password' placeholder='Enter Password' value={password} onChange={(e) => setPassword(e.target.value)}>\n                </Form.Control>\n            </Form.Group>\n\n            <Form.Group controlId='passwordConfirm'>\n                <Form.Label>Password Confirm</Form.Label>\n                <Form.Control type='password' placeholder='Confirm Password' value={confirmPassword} onChange={(e) => setConfirmPassword(e.target.value)}>\n                </Form.Control>\n            </Form.Group>\n\n            <Button type='submit' variant='primary'> Update</Button>\n\n        </Form>\n      </Col>\n\n      <Col md={9}>\n        <h2>My Orders</h2>\n        {loadingOrders ? (\n                    <Loader />\n                ) : errorOrders ? (\n                    <Message variant='danger'>{errorOrders}</Message>\n                ) : (\n                <Table striped responsive className='table-sm'>\n                    <thead>\n                        <tr>\n                            <th>ID</th>\n                            <th>Date</th>\n                            <th>Total</th>\n                            <th>Paid</th>\n                            <th>Delivered</th>\n                            <th></th>\n                        </tr>\n                    </thead>\n\n                    <tbody>\n                        {orders.map(order => (\n                            <tr key={order._id}>\n                                <td>{order._id}</td>\n                                <td>{order.createdAt.substring(0, 10)}</td>\n                                <td>${order.totalPrice}</td>\n                                <td>{order.isPaid ? order.paidAt.substring(0, 10) : (\n                                    <i className='fas fa-times' style={{ color: 'red' }}></i>\n                                )}</td>\n                                <td>\n                                    <LinkContainer to={`/order/${order._id}`}>\n                                        <Button className='btn-sm'>Details</Button>\n                                    </LinkContainer>\n                                </td>\n                            </tr>\n                        ))}\n                    </tbody>\n                </Table>\n            )}\n      </Col>\n    </Row>\n  )\n}\n\nexport default ProfileScreen","/home/joke/Videos/ecommerce/backend/frontend/src/screens/ShippingScreen.js",["236","237"],[],"import React, { useState, useEffect } from 'react'\nimport { useLocation, useNavigate } from 'react-router-dom'\nimport { Form, Button } from 'react-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport FormContainer from '../components/FormContainer'\nimport CheckoutSteps from '../components/CheckoutSteps'\nimport { saveShippingAddress } from '../actions/cartAction'\n\nfunction ShippingScreen() {\n    const history = useNavigate()\n\n    const cart = useSelector(state => state.cart)\n    const { shippingAddress } = cart\n\n    const dispatch = useDispatch() \n\n    const [address, setAddress] = useState(shippingAddress.address)\n    const [city, setCity] = useState(shippingAddress.city)\n    const [postalCode, setPostalCode] = useState(shippingAddress.postalCode)\n    const [country, setCountry] = useState(shippingAddress.country)\n\n    const submitHandler = (e) => {\n        e.preventDefault()\n        dispatch(saveShippingAddress({address, city, postalCode, country}))\n        history('/payment')\n    }\n\n  return (\n    <FormContainer>\n      <CheckoutSteps step1 step2 />\n      <h1>Shipping</h1>\n      <Form onSubmit={submitHandler}>\n        <Form.Group controlId='address'>\n            <Form.Label>Address</Form.Label>\n            <Form.Control required type='text' placeholder='Enter Address' value={address ? address : ''} onChange={(e) => setAddress(e.target.value)} >\n            </Form.Control>\n        </Form.Group>\n\n\n        <Form.Group controlId='city'>\n            <Form.Label>City</Form.Label>\n            <Form.Control required type='text' placeholder='Enter City' value={city ? city : ''} onChange={(e) => setCity(e.target.value)} >\n            </Form.Control>\n        </Form.Group>\n\n\n        <Form.Group controlId='postalCode'>\n            <Form.Label>Postal Code</Form.Label>\n            <Form.Control required type='text' placeholder='Enter PostalCode' value={postalCode ? postalCode : ''} onChange={(e) => setPostalCode(e.target.value)} >\n            </Form.Control>\n        </Form.Group>\n\n        <Form.Group controlId='country'>\n            <Form.Label>Country</Form.Label>\n            <Form.Control required type='text' placeholder='Enter Country' value={country ? country : ''} onChange={(e) => setCountry(e.target.value)} >\n            </Form.Control>\n        </Form.Group>\n\n        <Button type='submit' variant='primary' >\n            Continue\n        </Button>\n\n      </Form>\n    </FormContainer>\n  )\n}\n\nexport default ShippingScreen\n","/home/joke/Videos/ecommerce/backend/frontend/src/screens/PaymentScreen.js",["238","239"],[],"import React, { useState, useEffect } from 'react'\nimport { useLocation, useNavigate } from 'react-router-dom'\nimport { Form, Button, Col } from 'react-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport FormContainer from '../components/FormContainer'\nimport CheckoutSteps from '../components/CheckoutSteps'\nimport { savePaymentMethod } from '../actions/cartAction'\n\nfunction PaymentScreen() {\n    const history = useNavigate()\n\n    const cart = useSelector(state => state.cart)\n    const { shippingAddress } = cart\n\n    const [paymentMethod, setPaymentMethod] = useState('PayPal')\n\n    const dispatch = useDispatch()\n\n\n    if(!shippingAddress.address){\n        history('/shipping') \n    }\n\n    const submitHandler = (e) => {\n        e.preventDefault()\n        dispatch(savePaymentMethod(paymentMethod))\n        history('/placeorder')\n    }\n\n  return (\n    <FormContainer>\n        <CheckoutSteps step1 step2 step3 />\n\n        <Form onSubmit={submitHandler}>\n\n            <Form.Group>\n                <Form.Label as='legend'>Select Method</Form.Label>\n                <Col>\n                    <Form.Check type='radio' label='PayPal or Credit Card' id='paypal' name='paymentMethod' checked onChange={(e) => setPaymentMethod(e.target.value)}>\n\n                    </Form.Check>\n                </Col>\n            </Form.Group>\n\n            <Button type='submit' variant='primary'>\n                Continue\n            </Button>\n\n        </Form>\n      \n    </FormContainer>\n  )\n}\n\nexport default PaymentScreen\n","/home/joke/Videos/ecommerce/backend/frontend/src/screens/PlaceOrderScreen.js",["240","241","242"],[],"import React, { useState, useEffect } from 'react'\nimport { useLocation, useNavigate } from 'react-router-dom'\nimport { Button, Row, Col, ListGroup, Image, Card } from 'react-bootstrap'\nimport { Link } from 'react-router-dom'\nimport { useDispatch, useSelector } from 'react-redux'\nimport Message from '../components/Message'\nimport CheckoutSteps from '../components/CheckoutSteps'\nimport { createOrder } from '../actions/orderAction'\nimport { ORDER_CREATE_RESET } from '../constants/orderConstants'\n\nfunction PlaceOrderScreen() {\n\n    const history = useNavigate()\n\n    const orderCreate = useSelector(state =>  state.orderCreate)\n    const { order, error, success } = orderCreate\n\n    const dispatch = useDispatch()\n\n\n    const cart = useSelector(state => state.cart)\n\n    cart.itemsPrice = cart.cartItems.reduce((acc, item) => acc + item.price * item.qty, 0).toFixed(2)\n    cart.shippingPrice = (cart.itemsPrice > 100 ? 0 : 10).toFixed(2)\n    cart.taxPrice = Number((0.082) * cart.itemsPrice).toFixed(2)\n\n    cart.totalPrice = (Number(cart.itemsPrice) + Number(cart.shippingPrice) + Number(cart.taxPrice)).toFixed(2) \n\n    if (!cart.paymentMethod) {\n        history('/payment ')\n    }\n    \n    useEffect(() => {\n        if(success) {\n            history(`/order/${order._id}`)\n            dispatch({ type: ORDER_CREATE_RESET })\n        }\n    }, [success, history])\n\n    const placeOrder = () => {\n        dispatch(createOrder({\n            orderItems: cart.cartItems,\n            shippingAddress: cart.shippingAddress,\n            paymentMethod: cart.paymentMethod,\n            itemsPrice: cart.itemsPrice,\n            shippingPrice: cart.shippingPrice,\n            taxPrice: cart.taxPrice,\n            totalPrice: cart.totalPrice,\n        }))\n    }\n\n  return (\n    <div>\n        <CheckoutSteps step1 step2 step3 step4 />\n        <Row>\n            <Col md={8}>\n                <ListGroup variant='flush'>\n                    <ListGroup.Item>\n                        <h2>Shipping</h2>\n\n                        <p>\n                            <strong>Shipping: </strong>\n                            {cart.shippingAddress.address}, {cart.shippingAddress.city}\n                            {'  '}\n                            {cart.shippingAddress.postalCode},\n                            {'  '}\n                            {cart.shippingAddress.country} \n                        </p>\n                    </ListGroup.Item>\n\n                    <ListGroup.Item>\n                        <h2>Payment Method</h2>\n\n                        <p>\n                            <strong>Method: </strong>\n                            {cart.paymentMethod} \n                        </p>\n                    </ListGroup.Item>\n\n\n                    <ListGroup.Item>\n                        <h2>Order Items</h2>\n\n                        {cart.cartItems.length === 0 ? <Message variant='info'> \n                            Your cart is empty\n                        </Message> : (\n                            <ListGroup variant='flush'>\n                                {cart.cartItems.map((item, index) => (\n                                    <ListGroup.Item key={index}>\n                                        <Row>\n                                            <Col md={1}>\n                                                <Image src={item.image} alt={item.name} fluid rounded />\n                                            </Col>\n\n                                            <Col>\n                                                <Link to={`/product/${item.product}`}>{item.name}</Link>\n                                            </Col>\n\n                                            <Col md={4}>\n                                                {item.qty} X ${item.price} = ${(item.qty * item.price).toFixed(2)}\n                                            </Col>\n                                        </Row>\n                                    </ListGroup.Item>\n                                ))}\n                            </ListGroup>\n                        )}\n                    </ListGroup.Item>\n\n\n                </ListGroup>\n            </Col>\n\n            <Col md={4}>\n                <Card>\n                    <ListGroup variant='flush'>\n                        <ListGroup.Item>\n                            <h2>Order Summary</h2>\n                        </ListGroup.Item>\n\n                        <ListGroup.Item>\n                            <Row>\n                                <Col>Item:</Col>\n                                <Col>${cart.itemsPrice}</Col>\n                            </Row>\n                        </ListGroup.Item>\n\n                        <ListGroup.Item>\n                            <Row>\n                                <Col>Shipping:</Col>\n                                <Col>${cart.shippingPrice}</Col>\n                            </Row>\n                        </ListGroup.Item>\n                        \n                        <ListGroup.Item>\n                            <Row>\n                                <Col>Tax:</Col>\n                                <Col>${cart.taxPrice}</Col>\n                            </Row>\n                        </ListGroup.Item>\n\n                        <ListGroup.Item>\n                            <Row>\n                                <Col>Total:</Col>\n                                <Col>${cart.totalPrice}</Col>\n                            </Row>\n                        </ListGroup.Item>\n\n                        <ListGroup.Item>\n                        \n                            {error && <Message variant='danger'>{error}</Message>}\n\n                        </ListGroup.Item>            \n\n\n                        <ListGroup.Item>\n                            <Button type='button' className='w-100' disabled={cart.cartItems === 0} onClick={placeOrder}>\n                                Place Order\n                            </Button>\n                        </ListGroup.Item>\n\n                    </ListGroup>\n                </Card>\n            </Col>\n        </Row>\n      \n    </div>\n  )\n}\n\nexport default PlaceOrderScreen\n","/home/joke/Videos/ecommerce/backend/frontend/src/screens/UserListScreen.js",["243","244"],[],"import React, { useState, useEffect } from 'react'\nimport { useLocation, useNavigate } from 'react-router-dom'\nimport { LinkContainer } from 'react-router-bootstrap'\nimport { Table, Button } from 'react-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport Loader from '../components/Loader'\nimport Message from '../components/Message'\nimport { listUsers, deleteUser } from '../actions/userActions'\n\n\nfunction UserListScreen() {\n\n    const history = useNavigate()\n    const dispatch = useDispatch()\n\n    const userList = useSelector(state => state.userList)\n    const { loading, error, users } = userList\n\n\n    const userLogin = useSelector(state => state.userLogin)\n    const { userInfo } = userLogin\n\n\n    const userDelete = useSelector(state => state.userDelete)\n    const { success: successDelete } = userDelete\n\n\n    useEffect(() => {\n        if (userInfo && userInfo.isAdmin) {\n            dispatch(listUsers())\n        }else {\n            history('/login')\n        }\n    }, [dispatch, history, successDelete, userInfo])\n\n    const deleteHandler = (id) => {\n        if (window.confirm('Are you sure you want to delete this user?')){\n        dispatch(deleteUser(id))\n        }\n    }\n\n  return (\n    <div>\n            <h1>Users</h1>\n            {loading\n                ? (<Loader />)\n                : error\n                    ? (<Message variant='danger'>{error}</Message>)\n                    : (\n                        <Table striped bordered hover responsive className='table-sm'>\n                            <thead>\n                                <tr>\n                                    <th>ID</th>\n                                    <th>NAME</th>\n                                    <th>EMAIL</th>\n                                    <th>ADMIN</th>\n                                    <th></th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n                                {users.map(user => (\n                                    <tr key={user._id}>\n                                        <td>{user._id}</td>\n                                        <td>{user.name}</td>\n                                        <td>{user.email}</td>\n                                        <td>{user.isAdmin ? (\n                                            <i className='fas fa-check' style={{ color: 'green' }}></i>\n                                        ) : (\n                                                <i className='fas fa-check' style={{ color: 'red' }}></i>\n                                            )}</td>\n\n                                        <td>\n                                            <LinkContainer to={`/admin/user/${user._id}/edit`}>\n                                                <Button variant='light' className='btn-sm'>\n                                                    <i className='fas fa-edit'></i>\n                                                </Button>\n                                            </LinkContainer>\n\n                                            <Button variant='danger' className='btn-sm' onClick={() => deleteHandler(user._id)}>\n                                                <i className='fas fa-trash'></i>\n                                            </Button>\n                                        </td>\n                                    </tr>\n                                ))}\n                            </tbody>\n                        </Table>\n                    )}\n        </div>\n  )\n}\n\nexport default UserListScreen\n","/home/joke/Videos/ecommerce/backend/frontend/src/screens/OrderScreen.js",["245","246"],[],"import React, { useState, useEffect } from 'react'\nimport { useParams } from 'react-router-dom'\nimport { Button, Row, Col, ListGroup, Image, Card } from 'react-bootstrap'\nimport { Link, useNavigate } from 'react-router-dom'\nimport { useDispatch, useSelector } from 'react-redux'\nimport Message from '../components/Message'\nimport Loader from '../components/Loader'\nimport { getOrderDetails, payOrder, deliverOrder } from '../actions/orderAction'\nimport { ORDER_PAY_RESET, ORDER_DELIVER_RESET } from '../constants/orderConstants'\nimport { PayPalScriptProvider, PayPalButtons } from '@paypal/react-paypal-js'\n\n\nfunction OrderScreen() {\n\n    const history = useNavigate()\n\n    const { id } = useParams();    \n    const dispatch = useDispatch()\n\n    const [sdkReady, setSdkReady] = useState(false)\n\n    const orderDetails = useSelector(state =>  state.orderDetails)\n    const { order, error, loading } = orderDetails\n\n    const orderPay = useSelector(state =>  state.orderPay)\n    const { loading: loadingPay, success: successPay } = orderPay\n\n\n    const orderDeliver = useSelector(state =>  state.orderDeliver)\n    const { loading: loadingDeliver, success: successDeliver } = orderDeliver\n\n\n    const userLogin = useSelector(state =>  state.userLogin)\n    const { userInfo } = userLogin\n\n\n    if (!loading && !error){\n        order.itemsPrice = order.orderItems.reduce((acc, item) => acc + item.price * item.qty, 0).toFixed(2)\n    }\n\n   \n    \n    useEffect(() => {\n\n        if (!userInfo) {\n            history('/login')\n        }\n\n        if (!order || orderPay || order._id !== Number(id) || successDeliver ){\n            dispatch({type: ORDER_PAY_RESET})\n            dispatch({type: ORDER_DELIVER_RESET})\n            dispatch(getOrderDetails(id))\n        }else if(!order.isPaid) {\n            \n                setSdkReady(true)\n            \n        }\n        \n    }, [dispatch, order, id, successPay, successDeliver])\n\n\n    \n    const successPaymentHandler = (paymentResult) => {\n        dispatch(payOrder(id, paymentResult))\n    }\n\n    const deliverHandler = () => {\n        dispatch(deliverOrder(order))\n    }\n\n  return loading ? ( <Loader /> ) : error ? ( \n    <Message variant='danger'>{error}</Message>\n  ) : (\n    <div>\n        <h1>Order: {order._id}</h1>\n        <Row>\n            <Col md={8}>\n                <ListGroup variant='flush'>\n                    <ListGroup.Item>\n                        <h2>Shipping</h2>\n\n                        <p><strong>Name:</strong>{order.user.name}</p>\n                        <p><strong>Email: </strong><a href={`mailto:${order.user.email}`}>{order.user.email}</a></p>\n\n                        <p>\n                            <strong>Shipping: </strong>\n                            {order.shippingAddress.address}, {order.shippingAddress.city}\n                            {'  '}\n                            {order.shippingAddress.postalCode},\n                            {'  '}\n                            {order.shippingAddress.country} \n                        </p>\n\n                        {order.isDelivered ? (\n                            <Message variant='success'>Delivered on {order.deliveredAt}</Message>\n                        ) : (\n                            <Message variant='warning'>Not Delivered</Message> \n                        )}\n\n\n                    </ListGroup.Item>\n\n                    <ListGroup.Item>\n                        <h2>Payment Method</h2>\n\n                        <p>\n                            <strong>Method: </strong>\n                            {order.paymentMethod} \n                        </p>\n\n                        {order.isPaid ? (\n                            <Message variant='success'>Pain on {order.paidAt}</Message>\n                        ) : (\n                            <Message variant='warning'>Not Paid</Message> \n                        )}\n\n                    </ListGroup.Item>\n\n\n                    <ListGroup.Item>\n                        <h2>Order Items</h2>\n\n                        {order.orderItems.length === 0 ? <Message variant='info'> \n                            Order is empty\n                        </Message> : (\n                            <ListGroup variant='flush'>\n                                {order.orderItems.map((item, index) => (\n                                    <ListGroup.Item key={index}>\n                                        <Row>\n                                            <Col md={1}>\n                                                <Image src={item.image} alt={item.name} fluid rounded />\n                                            </Col>\n\n                                            <Col>\n                                                <Link to={`/product/${item.product}`}>{item.name}</Link>\n                                            </Col>\n\n                                            <Col md={4}>\n                                                {item.qty} X ${item.price} = ${(item.qty * item.price).toFixed(2)}\n                                            </Col>\n                                        </Row>\n                                    </ListGroup.Item>\n                                ))}\n                            </ListGroup>\n                        )}\n                    </ListGroup.Item>\n\n\n                </ListGroup>\n            </Col>\n\n            <Col md={4}>\n                <Card>\n                    <ListGroup variant='flush'>\n                        <ListGroup.Item>\n                            <h2>Order Summary</h2>\n                        </ListGroup.Item>\n\n                        <ListGroup.Item>\n                            <Row>\n                                <Col>Item:</Col>\n                                <Col>${order.itemsPrice}</Col>\n                            </Row>\n                        </ListGroup.Item>\n\n                        <ListGroup.Item>\n                            <Row>\n                                <Col>Shipping:</Col>\n                                <Col>${order.shippingPrice}</Col>\n                            </Row>\n                        </ListGroup.Item>\n                        \n                        <ListGroup.Item>\n                            <Row>\n                                <Col>Tax:</Col>\n                                <Col>${order.taxPrice}</Col>\n                            </Row>\n                        </ListGroup.Item>\n\n                        <ListGroup.Item>\n                            <Row>\n                                <Col>Total:</Col>\n                                <Col>${order.totalPrice}</Col>\n                            </Row>\n                        </ListGroup.Item>    \n\n                        {!order.isPaid && (\n                        <ListGroup.Item>\n                            {loadingPay && <Loader />}\n                            <PayPalScriptProvider options={{ 'client-id': 'AZ2x-OM0xtqVb_Up8sobCdse8RJHmejml6pf2xKbC-cBq2s00-UfpyoYnzhCkLPAd1jSVkKTQrxrMcB9' }}>\n                            <PayPalButtons\n                                createOrder={(data, actions) => {\n                                    return actions.order.create({\n                                        purchase_units: [\n                                            {\n                                                amount: {\n                                                    value: parseFloat(order.totalPrice).toFixed(2), // Convert to float and then use toFixed\n                                                },\n                                            },\n                                        ],\n                                    });\n                                }}\n                                onApprove={(data, actions) => {\n                                    return actions.order.capture().then(function (details) {\n                                        successPaymentHandler(details);\n                                    });\n                                }}\n                            />\n\n                            </PayPalScriptProvider>\n                        </ListGroup.Item>\n                    )}     \n\n                    {loadingDeliver && <Loader />}\n\n                    </ListGroup>\n\n                    {userInfo && userInfo.isAdmin && order.isPaid && !order.isDelivered && (\n                        <ListGroup.Item>\n                            <Button type='button' className='btn w-100 ' onClick={deliverHandler}>\n                                Mark As Deliver\n                            </Button>\n                        </ListGroup.Item>\n                    )}\n\n                </Card>\n            </Col>\n        </Row>\n      \n    </div>\n  )\n}\n\nexport default OrderScreen\n\n\n\n\n\n\n","/home/joke/Videos/ecommerce/backend/frontend/src/screens/ProductListScreen.js",["247","248"],[],"import React, { useState, useEffect } from 'react'\nimport { useLocation, useNavigate, useParams } from 'react-router-dom'\nimport { LinkContainer } from 'react-router-bootstrap'\nimport { Table, Button, Row, Col } from 'react-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport Loader from '../components/Loader'\nimport Message from '../components/Message'\nimport Paginate from '../components/Paginate'\nimport { listProducts, deleteProduct, createProduct } from '../actions/productActions'\nimport { PRODUCT_CREATE_RESET } from '../constants/productConstants'\n\nfunction ProductListScreen() {\n\n    const match = useParams()\n    const location = useLocation()\n    const history = useNavigate()\n    const dispatch = useDispatch()\n\n    const productList = useSelector(state => state.productList)\n    const { loading, error, products, page, pages } = productList\n\n    const productDelete = useSelector(state => state.productDelete)\n    const { loading: loadingDelete, error: errorDelete, success: successDelete } = productDelete\n\n    const productCreate = useSelector(state => state.productCreate)\n    const { loading: loadingCreate, error: errorCreate, success: successCreate, product: createdProduct } = productCreate\n\n\n    const userLogin = useSelector(state => state.userLogin)\n    const { userInfo } = userLogin\n\n    let keyword = location.search;\n\n    useEffect(() => {\n        dispatch({ type: PRODUCT_CREATE_RESET })\n        if (!userInfo.isAdmin) {\n            history('/login')\n        }\n\n        if(successCreate){\n            history(`/admin/product/${createdProduct._id}/edit`)\n        }else{\n            dispatch(listProducts(keyword))\n        }\n\n    }, [dispatch, history, userInfo, successDelete, successCreate, createdProduct,keyword])\n\n    const deleteHandler = (id) => {\n        if (window.confirm('Are you sure you want to delete this product?')){\n            dispatch(deleteProduct(id))\n        }\n    }\n\n    const createProductHandler = (product) => {\n        dispatch(createProduct())\n    }\n\n  return (\n    <div>\n            <Row className='align-items-center'>\n                <Col>\n\n                    <h1>Products</h1>\n\n                </Col>\n                <Col className='d-flex flex-row-reverse bd-highlight'>\n                    <Button className='my-3' onClick={createProductHandler}>\n                        <i className='fas fa-plus'></i> Create Product\n                    </Button>\n                </Col>\n            </Row>\n\n            {loadingDelete && <Loader />}\n            {errorDelete && <Message variant='danger'>{errorDelete}</Message>}\n\n\n            {loadingCreate && <Loader />}\n            {errorCreate && <Message variant='danger'>{errorCreate}</Message>}\n\n\n\n            {loading\n                ? (<Loader />)\n                : error\n                    ? (<Message variant='danger'>{error}</Message>)\n                    : (\n                        <div>\n                        <Table striped bordered hover responsive className='table-sm'>\n                            <thead>\n                                <tr>\n                                    <th>ID</th>\n                                    <th>NAME</th>\n                                    <th>PRICE</th>\n                                    <th>CATEGORY</th>\n                                    <th>BRAND</th>\n                                    <th></th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n                                {products.map(product => (\n                                    <tr key={product._id}>\n                                        <td>{product._id}</td>\n                                        <td>{product.name}</td>\n                                        <td>${product.price}</td>\n                                        <td>{product.category}</td>\n                                        <td>{product.brand}</td>\n                                        <td>{product.user.name}</td>\n\n                                        <td>\n                                            <LinkContainer to={`/admin/product/${product._id}/edit`}>\n                                                <Button variant='light' className='btn-sm'>\n                                                    <i className='fas fa-edit'></i>\n                                                </Button>\n                                            </LinkContainer>\n\n                                            <Button variant='danger' className='btn-sm' onClick={() => deleteHandler(product._id)}>\n                                                <i className='fas fa-trash'></i>\n                                            </Button>\n                                        </td>\n                                    </tr>\n                                ))}\n                            </tbody>\n                        </Table>\n                        <Paginate pages={pages} page={page} isAdmin={true} />\n                        </div>\n                    )}\n        </div>\n  )\n}\n\nexport default ProductListScreen\n","/home/joke/Videos/ecommerce/backend/frontend/src/screens/OrderListScreen.js",["249","250"],[],"import React, { useState, useEffect } from 'react'\nimport { useLocation, useNavigate } from 'react-router-dom'\nimport { LinkContainer } from 'react-router-bootstrap'\nimport { Table, Button } from 'react-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport Loader from '../components/Loader'\nimport Message from '../components/Message'\nimport { listOrders } from '../actions/orderAction'\n\n\nfunction OrderListScreen() {\n\n    const history = useNavigate()\n    const dispatch = useDispatch()\n\n    const orderList = useSelector(state => state.orderList)\n    const { loading, error, orders } = orderList\n\n\n    const userLogin = useSelector(state => state.userLogin)\n    const { userInfo } = userLogin\n\n\n    useEffect(() => {\n        if (userInfo && userInfo.isAdmin) {\n            dispatch(listOrders())\n        }else {\n            history('/login')\n        }\n    }, [dispatch, history, userInfo])\n\n   \n\n  return (\n    <div>\n            <h1>Orders</h1>\n            {loading\n                ? (<Loader />)\n                : error\n                    ? (<Message variant='danger'>{error}</Message>)\n                    : (\n                        <Table striped bordered hover responsive className='table-sm'>\n                            <thead>\n                                <tr>\n                                    <th>ID</th>\n                                    <th>USER</th>\n                                    <th>DATE</th>\n                                    <th>TOTAL</th>\n                                    <th>PAID</th>\n                                    <th>DELIVERED</th>\n                                    <th></th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n                                {orders.map(order => (\n                                    <tr key={order._id}>\n                                        <td>{order._id}</td>\n                                        <td>{order.user && order.user.name}</td>\n                                        <td>{order.createdAt.substring(0, 10)}</td>\n                                        <td>{order.totalPrice}</td>\n\n                                        <td>{order.isPaid ? (\n                                            order.paidAt.substring(0, 10)\n                                        ) : (\n                                                <i className='fas fa-check' style={{ color: 'red' }}></i>\n                                            )}</td>\n\n\n                                        <td>{order.isDelivered ? (\n                                            order.deliveredAt.substring(0, 10)\n                                        ) : (\n                                                <i className='fas fa-check' style={{ color: 'red' }}></i>\n                                            )}</td>    \n\n\n                                        <td>    \n                                            <LinkContainer to={`/order/${order._id}`}>\n                                                <Button variant='light' className='btn-sm'>\n                                                    Details\n                                                </Button>\n                                            </LinkContainer>\n                                        </td>\n                                    </tr>\n                                ))}\n                            </tbody>\n                        </Table>\n                    )}\n        </div>\n  )\n}\n\nexport default OrderListScreen \n","/home/joke/Videos/ecommerce/backend/frontend/src/screens/UserEditScreen.js",["251","252"],[],"import React, { useState, useEffect } from 'react'\nimport { Link, useParams, useNavigate } from 'react-router-dom'\nimport { Form, Button } from 'react-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport Loader from '../components/Loader'\nimport Message from '../components/Message'\nimport FormContainer from '../components/FormContainer'\nimport { getUserDetails, updateUser, updateUserProfile } from '../actions/userActions'\nimport { USER_UPDATE_RESET } from '../constants/userConstants'\n\nfunction EditUserScreen() {\n    const { id } = useParams() \n    const [name, setName] = useState('')\n    const [email, setEmail] = useState('')\n    const [isAdmin, setIsAdmin] = useState(false)\n    \n    const dispatch = useDispatch()\n    const history = useNavigate()\n\n    const userDetails = useSelector(state => state.userDetails)\n    const { error, loading, user } = userDetails\n\n    const userUpdate = useSelector(state => state.userUpdate)\n    const { error: errorUpdate, loading: loadingUpdate, success:successUpdate } = userUpdate\n \n    useEffect(() => {\n\n        if(successUpdate){\n            dispatch({ type: USER_UPDATE_RESET })\n            history('/admin/userlist')\n        }else{\n\n            if (!user.name || user._id !== Number(id)){\n                dispatch(getUserDetails(id))\n            }else{\n                setName(user.name)\n                setEmail(user.email)\n                setIsAdmin(user.isAdmin)\n            }\n\n    }\n    }, [user, id, successUpdate, history])\n\n    const submitHandler = (e) => {\n        e.preventDefault()\n        dispatch(updateUser({ _id: user._id, name, email, isAdmin }))\n    }\n  return (\n    <div>\n        <Link to='/admin/userlist'>\n            Go Back\n        </Link>\n    <FormContainer>\n        <h1>Edit User</h1>\n\n        { loadingUpdate && <Loader /> }\n        { errorUpdate && <Message variant='danger'>{errorUpdate}</Message> }\n\n        {loading ? <Loader /> : error ? <Message variant='danger'>{error}</Message> : (\n            <Form onSubmit={submitHandler}>\n            <Form.Group controlId='name'>\n                <Form.Label>Email Name</Form.Label>\n                <Form.Control type='name' placeholder='Enter Name' value={name} onChange={(e) => setName(e.target.value)}>\n                </Form.Control>\n            </Form.Group>\n\n\n            <Form.Group controlId='email'>\n                <Form.Label>Email Address</Form.Label>\n                <Form.Control type='email' placeholder='Enter Email' value={email} onChange={(e) => setEmail(e.target.value)}>\n                </Form.Control>\n            </Form.Group>\n\n            <Form.Group controlId='isadmin'>\n                <Form.Check type='checkbox' label=\"Is Admin\" checked={isAdmin} onChange={(e) => setIsAdmin(e.target.checked)}>\n                </Form.Check>\n            </Form.Group>\n\n            <Button type='submit' variant='primary'> Update</Button>\n\n        </Form>\n      \n        )}\n\n        \n    </FormContainer>\n    </div>\n  )\n}\n \nexport default EditUserScreen\n","/home/joke/Videos/ecommerce/backend/frontend/src/screens/ProductEditScreen.js",[],[],"/home/joke/Videos/ecommerce/backend/frontend/src/components/SearchBox.js",[],[],"/home/joke/Videos/ecommerce/backend/frontend/src/components/Product.js",[],[],"/home/joke/Videos/ecommerce/backend/frontend/src/components/Loader.js",[],[],"/home/joke/Videos/ecommerce/backend/frontend/src/components/Message.js",[],[],"/home/joke/Videos/ecommerce/backend/frontend/src/components/Paginate.js",[],[],"/home/joke/Videos/ecommerce/backend/frontend/src/components/ProductCarousel.js",["253","254"],[],"import React, { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Link } from 'react-router-dom'\nimport { Carousel, Image } from 'react-bootstrap'\nimport Loader from './Loader'\nimport Message from './Message'\nimport { listTopProducts } from '../actions/productActions'\n\nfunction ProductCarousel() {\n    const dispatch = useDispatch()\n\n    const productTopRated = useSelector(state => state.productTopRated)\n    const { error, loading, products } = productTopRated\n\n    useEffect(() => {\n        dispatch(listTopProducts())\n    }, dispatch)\n\n  return ( loading ? <Loader/>\n  : error\n  ? <Message variant='danger'>{error}</Message>\n  : (\n    <Carousel pause='hover' className='bg-dark'>\n    {products.map(product => (\n\n        <Carousel.Item key={product._id}>\n            <Link to={`/product/${product._id}`}>\n                <Image src={product.image} alt={product.name} fluid />\n                <Carousel.Caption className='carousel.caption'>\n                    <h4>{product.name} (${product.price})</h4>\n                </Carousel.Caption>\n            </Link>\n        </Carousel.Item>\n\n    ))}\n    </Carousel>\n  )\n    \n  )\n}\n\nexport default ProductCarousel\n","/home/joke/Videos/ecommerce/backend/frontend/src/constants/productConstants.js",[],[],"/home/joke/Videos/ecommerce/backend/frontend/src/constants/cartConstants.js",[],[],"/home/joke/Videos/ecommerce/backend/frontend/src/constants/orderConstants.js",[],[],"/home/joke/Videos/ecommerce/backend/frontend/src/constants/userConstants.js",[],[],"/home/joke/Videos/ecommerce/backend/frontend/src/components/Rating.js",[],[],"/home/joke/Videos/ecommerce/backend/frontend/src/actions/userActions.js",["255"],[],"import axios from \"axios\";\nimport { \n    USER_LOGIN_REQUEST,\n    USER_LOGIN_SUCCESS,\n    USER_LOGIN_FAIL,\n    USER_LOGOUT,\n\n    USER_REGISTER_REQUEST,\n    USER_REGISTER_SUCCESS,\n    USER_REGISTER_FAIL,\n\n    USER_DETAILS_REQUEST,\n    USER_DETAILS_SUCCESS,\n    USER_DETAILS_FAIL,\n    USER_DETAILS_RESET,\n\n    USER_UPDATE_PROFILE_REQUEST,\n    USER_UPDATE_PROFILE_SUCCESS,\n    USER_UPDATE_PROFILE_FAIL,\n    USER_UPDATE_PROFILE_RESET,\n\n    USER_LIST_REQUEST,\n    USER_LIST_SUCCESS,\n    USER_LIST_FAIL,\n    USER_LIST_RESET,\n\n    USER_DELETE_REQUEST,\n    USER_DELETE_SUCCESS,\n    USER_DELETE_FAIL,\n\n    USER_UPDATE_REQUEST,\n    USER_UPDATE_SUCCESS,\n    USER_UPDATE_FAIL, \n\n} from \"../constants/userConstants\";\n\nimport { ORDER_LIST_MY_RESET } from '../constants/orderConstants'\n\n\n\nexport const login = (email, password) => async (dispatch) => {\n    try{\n        dispatch({\n            type: USER_LOGIN_REQUEST\n        })\n\n        const config = {\n            headers: {\n                'Content-type' : 'application/json'\n            }\n        }\n\n        const { data } = await axios.post(\n            '/api/users/login/',  \n            {'username': email, 'password': password},\n            config\n        )\n\n        dispatch({\n            type: USER_LOGIN_SUCCESS,\n            payload: data\n        })\n\n        localStorage.setItem('userInfo', JSON.stringify(data))\n\n    }catch (error){\n        dispatch({\n            type: USER_LOGIN_FAIL,\n            payload: error.response && error.response.data.detail\n            ? error.response.data.detail\n            : error.message,\n        })\n    }\n}\n\n\nexport const logout = () => (dispatch) => {\n    localStorage.removeItem('userInfo')\n    dispatch({ type: USER_LOGOUT })\n    dispatch({ type: USER_DETAILS_RESET })\n    dispatch({ type: ORDER_LIST_MY_RESET })\n    dispatch({ type: USER_LIST_RESET })\n}\n\n\n\nexport const register = (name, email, password) => async (dispatch) => {\n    try{\n        dispatch({\n            type: USER_REGISTER_REQUEST\n        })\n\n        const config = {\n            headers: {\n                'Content-type' : 'application/json'\n            }\n        }\n\n        const { data } = await axios.post(\n            '/api/users/register/',  \n            {'name': name, 'email': email, 'password': password},\n            config\n        )\n\n        dispatch({\n            type: USER_REGISTER_SUCCESS,\n            payload: data\n        })\n\n        dispatch({\n            type: USER_LOGIN_SUCCESS,\n            payload: data\n        })\n\n        localStorage.setItem('userInfo', JSON.stringify(data))\n\n    }catch (error){\n        dispatch({\n            type: USER_REGISTER_FAIL,\n            payload: error.response && error.response.data.detail\n            ? error.response.data.detail\n            : error.message,\n        })\n    }\n}\n\n\n\nexport const getUserDetails = (id) => async (dispatch, getState) => {\n    try{\n        dispatch({\n            type: USER_DETAILS_REQUEST\n        })\n\n        const { userLogin: {userInfo}, } = getState()\n\n\n        const config = {\n            headers: {\n                'Content-type' : 'application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n\n        const { data } = await axios.get(\n            `/api/users/${id}/`,  \n            config\n        )\n\n        dispatch({\n            type: USER_DETAILS_SUCCESS,\n            payload: data\n        })\n\n       \n    }catch (error){\n        dispatch({\n            type: USER_DETAILS_FAIL,\n            payload: error.response && error.response.data.detail\n            ? error.response.data.detail\n            : error.message,\n        })\n    }\n}\n\n\n\n\nexport const updateUserProfile = (user) => async (dispatch, getState) => {\n    try{\n        dispatch({\n            type: USER_UPDATE_PROFILE_REQUEST\n        })\n\n        const { userLogin: {userInfo}, } = getState()\n\n\n        const config = {\n            headers: {\n                'Content-type' : 'application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n\n        const { data } = await axios.put(\n            `/api/users/profile/update/`, \n            user, \n            config\n        )\n\n        dispatch({\n            type: USER_UPDATE_PROFILE_SUCCESS,\n            payload: data\n        })\n\n        dispatch({\n            type: USER_LOGIN_SUCCESS,\n            payload: data\n        })\n\n        localStorage.setItem(userInfo, JSON.stringify(data))\n       \n    }catch (error){\n        dispatch({\n            type: USER_UPDATE_PROFILE_FAIL,\n            payload: error.response && error.response.data.detail\n            ? error.response.data.detail\n            : error.message,\n        })\n    }\n}\n\n\n\nexport const listUsers = () => async (dispatch, getState) => {\n    try {\n        dispatch({\n            type: USER_LIST_REQUEST\n        })\n\n        const {\n            userLogin: { userInfo },\n        } = getState()\n\n        const config = {\n            headers: {\n                'Content-type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n\n        const { data } = await axios.get(\n            `/api/users/`,\n            config\n        )\n\n        dispatch({\n            type: USER_LIST_SUCCESS,\n            payload: data\n        })\n\n\n    } catch (error) {\n        dispatch({\n            type: USER_LIST_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n    }\n}\n\n\n\nexport const deleteUser = (id) => async (dispatch, getState) => {\n    try {\n        dispatch({\n            type: USER_DELETE_REQUEST\n        })\n\n        const {\n            userLogin: { userInfo },\n        } = getState()\n\n        const config = {\n            headers: {\n                'Content-type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n\n        const { data } = await axios.delete(\n            `/api/users/delete/${id}/`,\n            config\n        )\n\n        dispatch({\n            type: USER_DELETE_SUCCESS,\n            payload: data\n        })\n\n\n    } catch (error) {\n        dispatch({\n            type: USER_DELETE_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n    }\n}\n\n\n\n\nexport const updateUser = (user) => async (dispatch, getState) => {\n    try {\n        dispatch({\n            type: USER_UPDATE_REQUEST\n        })\n\n        const {\n            userLogin: { userInfo },\n        } = getState()\n\n        const config = {\n            headers: {\n                'Content-type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n\n        const { data } = await axios.put(\n            `/api/users/update/${user._id}/`,\n            user,\n            config\n        )\n\n        dispatch({\n            type: USER_UPDATE_SUCCESS,\n        })\n\n        dispatch({\n            type: USER_DETAILS_SUCCESS,\n            payload: data\n        })\n\n\n    } catch (error) {\n        dispatch({\n            type: USER_UPDATE_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n    }\n}\n","/home/joke/Videos/ecommerce/backend/frontend/src/actions/productActions.js",["256"],[],"import axios from 'axios'\n\nimport { \n    PRODUCT_LIST_REQUEST,\n    PRODUCT_LIST_SUCCESS,\n    PRODUCT_LIST_FAIL,\n\n    PRODUCT_DETAILS_REQUEST,\n    PRODUCT_DETAILS_SUCCESS,\n    PRODUCT_DETAILS_FAIL,\n\n    PRODUCT_DELETE_REQUEST,\n    PRODUCT_DELETE_SUCCESS,\n    PRODUCT_DELETE_FAIL,\n\n    PRODUCT_CREATE_REQUEST,\n    PRODUCT_CREATE_SUCCESS,\n    PRODUCT_CREATE_FAIL,\n\n    PRODUCT_UPDATE_REQUEST,\n    PRODUCT_UPDATE_SUCCESS,\n    PRODUCT_UPDATE_FAIL,\n\n    PRODUCT_CREATE_REVIEW_REQUEST,\n    PRODUCT_CREATE_REVIEW_SUCCESS,\n    PRODUCT_CREATE_REVIEW_FAIL,\n\n    PRODUCT_TOP_REQUEST,\n    PRODUCT_TOP_SUCCESS,\n    PRODUCT_TOP_FAIL,\n\n } from \"../constants/productConstants\"\n\n\nexport const listProducts = (keyword = '') => async (dispatch) => {\n    try {\n\n        dispatch({ type: PRODUCT_LIST_REQUEST })\n\n        const { data } = await axios.get(`/api/products/${keyword}`)\n\n        dispatch({\n            type: PRODUCT_LIST_SUCCESS,\n            payload: data\n        })\n\n    } catch (error) {\n        dispatch({\n            type: PRODUCT_LIST_FAIL, \n            payload: error.response && error.response.data.detail \n            ? error.response.data.detail\n            : error.message,\n        })\n    }\n }\n\n\n export const listTopProducts = () => async (dispatch) => {\n    try {\n\n        dispatch({ type: PRODUCT_TOP_REQUEST })\n\n        const { data } = await axios.get(`/api/products/top`)\n\n        dispatch({\n            type: PRODUCT_TOP_SUCCESS,\n            payload: data\n        })\n\n    } catch (error) {\n        dispatch({\n            type: PRODUCT_TOP_FAIL, \n            payload: error.response && error.response.data.detail \n            ? error.response.data.detail\n            : error.message,\n        })\n    }\n }\n\n\n export const listProductDetails = (id) => async (dispatch) => {\n    try {\n\n        dispatch({ type: PRODUCT_DETAILS_REQUEST })\n\n        const { data } = await axios.get(`/api/products/${id}`)\n\n        dispatch({\n            type: PRODUCT_DETAILS_SUCCESS,\n            payload: data\n        })\n\n    } catch (error) {\n        dispatch({\n            type: PRODUCT_DETAILS_FAIL, \n            payload: error.response && error.response.data.detail \n            ? error.response.data.detail\n            : error.message,\n        })\n    }\n }\n\n\n export const deleteProduct = (id) => async (dispatch, getState) => {\n    try {\n        dispatch({\n            type: PRODUCT_DELETE_REQUEST\n        })\n\n        const {\n            userLogin: { userInfo },\n        } = getState()\n\n        const config = {\n            headers: {\n                'Content-type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n\n        const { data } = await axios.delete(\n            `/api/products/delete/${id}`,\n            config\n        )\n\n        dispatch({\n            type: PRODUCT_DELETE_SUCCESS,\n        })\n\n\n    } catch (error) {\n        dispatch({\n            type: PRODUCT_DELETE_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n    }\n}\n\n\n\nexport const createProduct = () => async (dispatch, getState) => {\n    try {\n        dispatch({\n            type: PRODUCT_CREATE_REQUEST\n        })\n\n        const {\n            userLogin: { userInfo },\n        } = getState()\n\n        const config = {\n            headers: {\n                'Content-type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n\n        const { data } = await axios.post(\n            `/api/products/create/`,\n            {},\n            config\n        )\n        dispatch({\n            type: PRODUCT_CREATE_SUCCESS,\n            payload: data,\n        })\n\n\n    } catch (error) {\n        dispatch({\n            type: PRODUCT_CREATE_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n    }\n}\n\n\n\n\nexport const updateProduct = (product) => async (dispatch, getState) => {\n    try {\n        dispatch({\n            type: PRODUCT_UPDATE_REQUEST\n        })\n\n        const {\n            userLogin: { userInfo },\n        } = getState()\n\n        const config = {\n            headers: {\n                'Content-type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n\n        const { data } = await axios.put(\n            `/api/products/update/${product._id}/`,\n            product,\n            config\n        )\n        dispatch({\n            type: PRODUCT_UPDATE_SUCCESS,\n            payload: data,\n        })\n\n\n        dispatch({\n            type: PRODUCT_DETAILS_SUCCESS,\n            payload: data\n        })\n\n\n    } catch (error) {\n        dispatch({\n            type: PRODUCT_UPDATE_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n    }\n}\n\n\n\nexport const createProductReview = (id, review) => async (dispatch, getState) => {\n    try {\n        dispatch({\n            type: PRODUCT_CREATE_REVIEW_REQUEST\n        })\n\n        const {\n            userLogin: { userInfo },\n        } = getState()\n\n        const config = {\n            headers: {\n                'Content-type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n\n        const { data } = await axios.post(\n            `/api/products/${id}/reviews/`,\n            review,\n            config\n        )\n        dispatch({\n            type: PRODUCT_CREATE_REVIEW_SUCCESS,\n            payload: data,\n        })\n\n\n\n    } catch (error) {\n        dispatch({\n            type: PRODUCT_CREATE_REVIEW_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n    }\n}","/home/joke/Videos/ecommerce/backend/frontend/src/actions/cartAction.js",[],[],"/home/joke/Videos/ecommerce/backend/frontend/src/components/FormContainer.js",["257"],[],"import React, { Children } from 'react'\nimport { Container, Row, Col } from 'react-bootstrap'\n\nfunction FormContainer({ children }) {\n  return (\n    <Container>\n        <Row className=\"justify-content-md-center\">\n            <Col xs={12} md={6}>\n                {children}\n            </Col>\n        </Row>\n    </Container>\n  )\n}\n \n\nexport default FormContainer\n","/home/joke/Videos/ecommerce/backend/frontend/src/actions/orderAction.js",["258","259","260","261"],[],"import axios from 'axios'\nimport { ORDER_CREATE_REQUEST, ORDER_CREATE_SUCCESS, ORDER_CREATE_FAIL, ORDER_DETAILS_REQUEST, ORDER_DETAILS_SUCCESS, ORDER_DETAILS_FAIL,\n    ORDER_PAY_REQUEST, ORDER_PAY_SUCCESS, ORDER_PAY_FAIL, ORDER_PAY_RESET, ORDER_LIST_MY_REQUEST,\n    ORDER_LIST_MY_SUCCESS,\n    ORDER_LIST_MY_FAIL,\n    ORDER_LIST_MY_RESET,\n\n    ORDER_LIST_REQUEST,\n    ORDER_LIST_SUCCESS,\n    ORDER_LIST_FAIL,\n\n    ORDER_DELIVER_REQUEST,\n    ORDER_DELIVER_SUCCESS,\n    ORDER_DELIVER_FAIL,\n    ORDER_DELIVER_RESET,\n} from \"../constants/orderConstants\";\nimport { CART_CLEAR_ITEMS } from '../constants/cartConstants'\n\nexport const createOrder = (order) => async (dispatch, getState) => {\n    try{\n        dispatch({\n            type: ORDER_CREATE_REQUEST\n        })\n\n        const { userLogin: {userInfo}, } = getState()\n\n\n        const config = {\n            headers: {\n                'Content-type' : 'application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n\n        const { data } = await axios.post(\n            `/api/orders/add/`, \n            order, \n            config\n        )\n\n        dispatch({\n            type: ORDER_CREATE_SUCCESS,\n            payload: data\n        })\n\n        dispatch({\n            type: CART_CLEAR_ITEMS,\n            payload: data\n        })\n\n\n        localStorage.removeItem('cartItems')\n       \n    }catch (error){\n        dispatch({\n            type: ORDER_CREATE_FAIL,\n            payload: error.response && error.response.data.detail\n            ? error.response.data.detail\n            : error.message,\n        })\n    }\n}\n\n\n\nexport const getOrderDetails = (id) => async (dispatch, getState) => {\n    try{\n        dispatch({\n            type: ORDER_CREATE_REQUEST\n        })\n\n        const { userLogin: {userInfo}, } = getState()\n\n\n        const config = {\n            headers: {\n                'Content-type' : 'application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n\n        const { data } = await axios.get(\n            `/api/orders/${id}/`, \n            config\n        )\n\n        dispatch({\n            type: ORDER_DETAILS_SUCCESS,\n            payload: data\n        })\n\n       \n    }catch (error){\n        dispatch({\n            type: ORDER_DETAILS_FAIL,\n            payload: error.response && error.response.data.detail\n            ? error.response.data.detail\n            : error.message,\n        })\n    }\n}\n\n\n\n\n\nexport const deliverOrder = (order) => async (dispatch, getState) => {\n    try{\n        dispatch({\n            type: ORDER_DELIVER_REQUEST\n        })\n\n        const { userLogin: {userInfo}, } = getState()\n\n\n        const config = {\n            headers: {\n                'Content-type' : 'application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n\n        const { data } = await axios.put(\n            `/api/orders/${order._id}/deliver/`, \n            {},\n            config\n        )\n\n        dispatch({\n            type: ORDER_DELIVER_SUCCESS,\n            payload: data\n        })\n\n       \n    }catch (error){\n        dispatch({\n            type: ORDER_DELIVER_FAIL,\n            payload: error.response && error.response.data.detail\n            ? error.response.data.detail\n            : error.message,\n        })\n    }\n}\n\n\nexport const payOrder = (id, paymentResult) => async (dispatch, getState) => {\n    try{\n        dispatch({\n            type: ORDER_PAY_REQUEST\n        })\n\n        const { userLogin: {userInfo}, } = getState()\n\n\n        const config = {\n            headers: {\n                'Content-type' : 'application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n\n        const { data } = await axios.put(\n            `/api/orders/${id}/pay/`, \n            paymentResult,\n            config\n        )\n\n        dispatch({\n            type: ORDER_PAY_SUCCESS,\n            payload: data\n        })\n\n       \n    }catch (error){\n        dispatch({\n            type: ORDER_PAY_FAIL,\n            payload: error.response && error.response.data.detail\n            ? error.response.data.detail\n            : error.message,\n        })\n    }\n}\n\n\n\nexport const listMyOrders = () => async (dispatch, getState) => {\n    try {\n        dispatch({\n            type: ORDER_LIST_MY_REQUEST\n        })\n\n        const {\n            userLogin: { userInfo },\n        } = getState()\n\n        const config = {\n            headers: {\n                'Content-type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n\n        const { data } = await axios.get(\n            `/api/orders/myorders/`,\n            config\n        )\n\n        dispatch({\n            type: ORDER_LIST_MY_SUCCESS,\n            payload: data\n        })\n\n\n    } catch (error) {\n        dispatch({\n            type: ORDER_LIST_MY_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n    }\n}\n\n\n\nexport const listOrders = () => async (dispatch, getState) => {\n    try {\n        dispatch({\n            type: ORDER_LIST_REQUEST\n        })\n\n        const {\n            userLogin: { userInfo },\n        } = getState()\n\n        const config = {\n            headers: {\n                'Content-type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n\n        const { data } = await axios.get(\n            `/api/orders/`,\n            config\n        )\n\n        dispatch({\n            type: ORDER_LIST_SUCCESS,\n            payload: data\n        })\n\n\n    } catch (error) {\n        dispatch({\n            type: ORDER_LIST_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n    }\n}","/home/joke/Videos/ecommerce/backend/frontend/src/components/CheckoutSteps.js",[],[],{"ruleId":"262","severity":1,"message":"263","line":9,"column":3,"nodeType":"264","messageId":"265","endLine":9,"endColumn":29},{"ruleId":"262","severity":1,"message":"266","line":1,"column":17,"nodeType":"264","messageId":"265","endLine":1,"endColumn":25},{"ruleId":"267","severity":1,"message":"268","line":145,"column":80,"nodeType":"269","messageId":"270","endLine":145,"endColumn":82},{"ruleId":"267","severity":1,"message":"271","line":36,"column":21,"nodeType":"269","messageId":"270","endLine":36,"endColumn":23},{"ruleId":"267","severity":1,"message":"271","line":57,"column":21,"nodeType":"269","messageId":"270","endLine":57,"endColumn":23},{"ruleId":"262","severity":1,"message":"272","line":1,"column":27,"nodeType":"264","messageId":"265","endLine":1,"endColumn":36},{"ruleId":"262","severity":1,"message":"273","line":2,"column":10,"nodeType":"264","messageId":"265","endLine":2,"endColumn":21},{"ruleId":"262","severity":1,"message":"272","line":1,"column":27,"nodeType":"264","messageId":"265","endLine":1,"endColumn":36},{"ruleId":"262","severity":1,"message":"273","line":2,"column":10,"nodeType":"264","messageId":"265","endLine":2,"endColumn":21},{"ruleId":"262","severity":1,"message":"266","line":1,"column":17,"nodeType":"264","messageId":"265","endLine":1,"endColumn":25},{"ruleId":"262","severity":1,"message":"273","line":2,"column":10,"nodeType":"264","messageId":"265","endLine":2,"endColumn":21},{"ruleId":"274","severity":1,"message":"275","line":38,"column":8,"nodeType":"276","endLine":38,"endColumn":26,"suggestions":"277"},{"ruleId":"262","severity":1,"message":"266","line":1,"column":17,"nodeType":"264","messageId":"265","endLine":1,"endColumn":25},{"ruleId":"262","severity":1,"message":"273","line":2,"column":10,"nodeType":"264","messageId":"265","endLine":2,"endColumn":21},{"ruleId":"262","severity":1,"message":"278","line":20,"column":12,"nodeType":"264","messageId":"265","endLine":20,"endColumn":20},{"ruleId":"274","severity":1,"message":"279","line":59,"column":8,"nodeType":"276","endLine":59,"endColumn":57,"suggestions":"280"},{"ruleId":"262","severity":1,"message":"266","line":1,"column":17,"nodeType":"264","messageId":"265","endLine":1,"endColumn":25},{"ruleId":"262","severity":1,"message":"281","line":14,"column":11,"nodeType":"264","messageId":"265","endLine":14,"endColumn":16},{"ruleId":"262","severity":1,"message":"266","line":1,"column":17,"nodeType":"264","messageId":"265","endLine":1,"endColumn":25},{"ruleId":"262","severity":1,"message":"273","line":2,"column":10,"nodeType":"264","messageId":"265","endLine":2,"endColumn":21},{"ruleId":"262","severity":1,"message":"282","line":8,"column":38,"nodeType":"264","messageId":"265","endLine":8,"endColumn":55},{"ruleId":"274","severity":1,"message":"283","line":42,"column":8,"nodeType":"276","endLine":42,"endColumn":42,"suggestions":"284"},{"ruleId":"274","severity":1,"message":"285","line":17,"column":8,"nodeType":"264","endLine":17,"endColumn":16},{"ruleId":"274","severity":1,"message":"283","line":17,"column":8,"nodeType":"264","endLine":17,"endColumn":16,"suggestions":"286"},{"ruleId":"262","severity":1,"message":"287","line":20,"column":5,"nodeType":"264","messageId":"265","endLine":20,"endColumn":30},{"ruleId":"262","severity":1,"message":"288","line":121,"column":17,"nodeType":"264","messageId":"265","endLine":121,"endColumn":21},{"ruleId":"262","severity":1,"message":"289","line":1,"column":17,"nodeType":"264","messageId":"265","endLine":1,"endColumn":25},{"ruleId":"262","severity":1,"message":"290","line":2,"column":73,"nodeType":"264","messageId":"265","endLine":2,"endColumn":94},{"ruleId":"262","severity":1,"message":"291","line":3,"column":59,"nodeType":"264","messageId":"265","endLine":3,"endColumn":74},{"ruleId":"262","severity":1,"message":"292","line":6,"column":5,"nodeType":"264","messageId":"265","endLine":6,"endColumn":24},{"ruleId":"262","severity":1,"message":"293","line":15,"column":5,"nodeType":"264","messageId":"265","endLine":15,"endColumn":24},"no-unused-vars","'productReviewCreateReducer' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","'useEffect' is defined but never used.","'useLocation' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch' and 'order._id'. Either include them or remove the dependency array.","ArrayExpression",["294"],"'sdkReady' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'history', 'orderPay', and 'userInfo'. Either include them or remove the dependency array.",["295"],"'match' is assigned a value but never used.","'updateUserProfile' is defined but never used.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["296"],"React Hook useEffect was passed a dependency list that is not an array literal. This means we can't statically verify whether you've passed the correct dependencies.",["297"],"'USER_UPDATE_PROFILE_RESET' is defined but never used.","'data' is assigned a value but never used.","'Children' is defined but never used.","'ORDER_DETAILS_REQUEST' is defined but never used.","'ORDER_PAY_RESET' is defined but never used.","'ORDER_LIST_MY_RESET' is defined but never used.","'ORDER_DELIVER_RESET' is defined but never used.",{"desc":"298","fix":"299"},{"desc":"300","fix":"301"},{"desc":"302","fix":"303"},{"desc":"304","fix":"305"},"Update the dependencies array to be: [success, history, order._id, dispatch]",{"range":"306","text":"307"},"Update the dependencies array to be: [dispatch, order, id, successPay, successDeliver, userInfo, orderPay, history]",{"range":"308","text":"309"},"Update the dependencies array to be: [user, id, successUpdate, history, dispatch]",{"range":"310","text":"311"},"Update the dependencies array to be: [dispatch]",{"range":"312","text":"313"},[1347,1365],"[success, history, order._id, dispatch]",[1867,1916],"[dispatch, order, id, successPay, successDeliver, userInfo, orderPay, history]",[1466,1500],"[user, id, successUpdate, history, dispatch]",[569,577],"[dispatch]"]