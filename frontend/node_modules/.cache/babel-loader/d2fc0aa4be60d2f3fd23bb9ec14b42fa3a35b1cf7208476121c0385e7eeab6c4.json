{"ast":null,"code":"import axios from \"axios\";\nimport { USER_LOGIN_REQUEST, USER_LOGIN_SUCCESS, USER_LOGIN_FAIL, USER_LOGOUT, USER_REGISTER_REQUEST, USER_REGISTER_SUCCESS, USER_REGISTER_FAIL, USER_DETAILS_REQUEST, USER_DETAILS_SUCCESS, USER_DETAILS_FAIL, USER_UPDATE_PROFILE_REQUEST, USER_UPDATE_PROFILE_SUCCESS, USER_UPDATE_PROFILE_FAIL, USER_UPDATE_PROFILE_RESET } from \"../constants/userConstants\";\nimport { type } from \"@testing-library/user-event/dist/type\";\nexport const login = (email, password) => async dispatch => {\n  try {\n    dispatch({\n      type: USER_LOGIN_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.post('/api/users/login/', {\n      'username': email,\n      'password': password\n    }, config);\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data\n    });\n    localStorage.setItem('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_LOGIN_FAIL,\n      payload: error.response && error.response.data.detail ? error.response.data.detail : error.message\n    });\n  }\n};\nexport const logout = () => dispatch => {\n  localStorage.removeItem('userInfo');\n  dispatch({\n    type: USER_LOGOUT\n  });\n};\nexport const register = (name, email, password) => async dispatch => {\n  try {\n    dispatch({\n      type: USER_REGISTER_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.post('/api/users/register/', {\n      'name': name,\n      'email': email,\n      'password': password\n    }, config);\n    dispatch({\n      type: USER_REGISTER_SUCCESS,\n      payload: data\n    });\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data\n    });\n    localStorage.setItem('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_REGISTER_FAIL,\n      payload: error.response && error.response.data.detail ? error.response.data.detail : error.message\n    });\n  }\n};\nexport const getUserDetails = id => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_DETAILS_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        'Content-type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.get(`/api/users/${id}/`, config);\n    dispatch({\n      type: USER_DETAILS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: USER_DETAILS_FAIL,\n      payload: error.response && error.response.data.detail ? error.response.data.detail : error.message\n    });\n  }\n};\nexport const updateUserProfile = user => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_UPDATE_PROFILE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        'Content-type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.PUT(`/api/users/profile/update/`, user, config);\n    dispatch({\n      type: USER_UPDATE_PROFILE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: USER_UPDATE_PROFILE_FAIL,\n      payload: error.response && error.response.data.detail ? error.response.data.detail : error.message\n    });\n  }\n};","map":{"version":3,"names":["axios","USER_LOGIN_REQUEST","USER_LOGIN_SUCCESS","USER_LOGIN_FAIL","USER_LOGOUT","USER_REGISTER_REQUEST","USER_REGISTER_SUCCESS","USER_REGISTER_FAIL","USER_DETAILS_REQUEST","USER_DETAILS_SUCCESS","USER_DETAILS_FAIL","USER_UPDATE_PROFILE_REQUEST","USER_UPDATE_PROFILE_SUCCESS","USER_UPDATE_PROFILE_FAIL","USER_UPDATE_PROFILE_RESET","type","login","email","password","dispatch","config","headers","data","post","payload","localStorage","setItem","JSON","stringify","error","response","detail","message","logout","removeItem","register","name","getUserDetails","id","getState","userLogin","userInfo","Authorization","token","get","updateUserProfile","user","PUT"],"sources":["/home/joke/Videos/ecommerce/frontend/src/actions/userActions.js"],"sourcesContent":["import axios from \"axios\";\nimport { \n    USER_LOGIN_REQUEST,\n    USER_LOGIN_SUCCESS,\n    USER_LOGIN_FAIL,\n    USER_LOGOUT,\n\n    USER_REGISTER_REQUEST,\n    USER_REGISTER_SUCCESS,\n    USER_REGISTER_FAIL,\n\n    USER_DETAILS_REQUEST,\n    USER_DETAILS_SUCCESS,\n    USER_DETAILS_FAIL,\n\n    USER_UPDATE_PROFILE_REQUEST,\n    USER_UPDATE_PROFILE_SUCCESS,\n    USER_UPDATE_PROFILE_FAIL,\n    USER_UPDATE_PROFILE_RESET,\n\n} from \"../constants/userConstants\";\nimport { type } from \"@testing-library/user-event/dist/type\";\n\n\nexport const login = (email, password) => async (dispatch) => {\n    try{\n        dispatch({\n            type: USER_LOGIN_REQUEST\n        })\n\n        const config = {\n            headers: {\n                'Content-type' : 'application/json'\n            }\n        }\n\n        const { data } = await axios.post(\n            '/api/users/login/',  \n            {'username': email, 'password': password},\n            config\n        )\n\n        dispatch({\n            type: USER_LOGIN_SUCCESS,\n            payload: data\n        })\n\n        localStorage.setItem('userInfo', JSON.stringify(data))\n\n    }catch (error){\n        dispatch({\n            type: USER_LOGIN_FAIL,\n            payload: error.response && error.response.data.detail\n            ? error.response.data.detail\n            : error.message,\n        })\n    }\n}\n\n\nexport const logout = () => (dispatch) => {\n    localStorage.removeItem('userInfo')\n    dispatch({ type: USER_LOGOUT })\n}\n\n\n\nexport const register = (name, email, password) => async (dispatch) => {\n    try{\n        dispatch({\n            type: USER_REGISTER_REQUEST\n        })\n\n        const config = {\n            headers: {\n                'Content-type' : 'application/json'\n            }\n        }\n\n        const { data } = await axios.post(\n            '/api/users/register/',  \n            {'name': name, 'email': email, 'password': password},\n            config\n        )\n\n        dispatch({\n            type: USER_REGISTER_SUCCESS,\n            payload: data\n        })\n\n        dispatch({\n            type: USER_LOGIN_SUCCESS,\n            payload: data\n        })\n\n        localStorage.setItem('userInfo', JSON.stringify(data))\n\n    }catch (error){\n        dispatch({\n            type: USER_REGISTER_FAIL,\n            payload: error.response && error.response.data.detail\n            ? error.response.data.detail\n            : error.message,\n        })\n    }\n}\n\n\n\nexport const getUserDetails = (id) => async (dispatch, getState) => {\n    try{\n        dispatch({\n            type: USER_DETAILS_REQUEST\n        })\n\n        const { userLogin: {userInfo}, } = getState()\n\n\n        const config = {\n            headers: {\n                'Content-type' : 'application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n\n        const { data } = await axios.get(\n            `/api/users/${id}/`,  \n            config\n        )\n\n        dispatch({\n            type: USER_DETAILS_SUCCESS,\n            payload: data\n        })\n\n       \n    }catch (error){\n        dispatch({\n            type: USER_DETAILS_FAIL,\n            payload: error.response && error.response.data.detail\n            ? error.response.data.detail\n            : error.message,\n        })\n    }\n}\n\n\n\n\nexport const updateUserProfile = (user) => async (dispatch, getState) => {\n    try{\n        dispatch({\n            type: USER_UPDATE_PROFILE_REQUEST\n        })\n\n        const { userLogin: {userInfo}, } = getState()\n\n\n        const config = {\n            headers: {\n                'Content-type' : 'application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n\n        const { data } = await axios.PUT(\n            `/api/users/profile/update/`, \n            user, \n            config\n        )\n\n        dispatch({\n            type: USER_UPDATE_PROFILE_SUCCESS,\n            payload: data\n        })\n\n       \n    }catch (error){\n        dispatch({\n            type: USER_UPDATE_PROFILE_FAIL,\n            payload: error.response && error.response.data.detail\n            ? error.response.data.detail\n            : error.message,\n        })\n    }\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}